//     Project: SBT NPM
//      Module:
// Description:
package de.surfice.sbtnpm

import org.scalajs.sbtplugin.ScalaJSPlugin
import sbt._
import sbt.Keys._

object NpmPlugin extends AutoPlugin {

  //override lazy val requires = ScalaJSPlugin

  // Exported keys
  /**
   * @groupname tasks Tasks
   * @groupname settings Settings
   */
  object autoImport {
    /**
     * Defines the directory in which the npm `node_modules` resides.
     *
     * Defaults to `baseDirectory.value`.
     *
     * @group settings
     */
    val npmTargetDirectory: SettingKey[File] =
      settingKey[File]("Target directory for node_modules")

    /**
      * List of the NPM packages (name and version) your application depends on.
      * You can use [semver](https://docs.npmjs.com/misc/semver) versions:
      *
      * {{{
      *   npmDependencies += "uuid" -> "~3.0.0"
      * }}}
      *
      * @group settings
      */
    val npmDependencies: SettingKey[Seq[(String, String)]] =
      settingKey[Seq[(String, String)]]("NPM dependencies (libraries that your program uses)")

    /** @group settings */
    val npmDevDependencies: SettingKey[Seq[(String, String)]] =
      settingKey[Seq[(String, String)]]("NPM dev dependencies (libraries that the build uses)")

    /**
     * Defines the path to the package.json file generated by the [[npmWritePackageJson]] task.
     *
     * Default: `npmTargetDirectory.value / "package.json"`
     *
     * @group settings
     */
    val npmPackageJsonFile: SettingKey[File] =
      settingKey[File]("Full path to the npm package.json file")

    val npmPackageJson: SettingKey[PackageJson] =
      settingKey[PackageJson]("Defines the contents of the npm package.json file")

    val npmWritePackageJson: TaskKey[File] =
      taskKey[File]("Create the npm package.json file.")

    /**
     *
     * @group tasks
     */
    val npmInstall: TaskKey[Unit] =
      taskKey[Unit]("Install npm dependencies")
  }

  import autoImport._

  override lazy val projectSettings: Seq[Def.Setting[_]] = Seq(
    npmTargetDirectory := baseDirectory.value,

    npmPackageJsonFile := npmTargetDirectory.value / "package.json",

    npmDependencies := Nil,

    npmDevDependencies := Nil,

    npmPackageJson := PackageJson(
      path = npmPackageJsonFile.value,
      name = name.value,
      version = version.value,
      dependencies = npmDevDependencies.value,
      devDependencies = npmDevDependencies.value
    ),

    npmWritePackageJson := {
      npmPackageJson.value.writeFile()(streams.value.log)
      npmPackageJsonFile.value
    }
  )
}

